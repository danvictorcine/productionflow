rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Default-deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can manage their own profile
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Generic rule for ALL user-owned collections.
    // This single rule covers projects, groups, transactions, etc.
    match /{collection}/{docId} {
      // A user can create a document if they are the owner.
      allow create: if isOwner(request.resource.data.userId);
      // A user can read, update, or delete a document if they are the owner.
      allow get, update, delete: if isOwner(resource.data.userId);
      // A user can query a collection as long as they filter by their own userId.
      allow list: if request.auth != null && request.query.resource.data.userId == request.auth.uid;
    }

    // Public collections (anyone can read, only admins can write)
    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    match /posts/{postId} {
      allow get: if true;
      allow list, write: if isAdmin();
    }
    match /pages/{pageId} {
      allow get: if true;
      allow list, write: if isAdmin();
    }
    match /teamMembers/{memberId} {
      allow get: if true;
      allow list, write: if isAdmin();
    }
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Publicly readable documents for sharing
    match /public_productions/{productionId} { allow get: if true; }
    match /public_shooting_days/{dayId} { allow get: if true; }
  }
}
