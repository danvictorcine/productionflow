rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Function to check project-level read access
    function canReadProject() {
      return request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Function to check project-level list/query access
    function canListProjects() {
      // This is intentionally broad for the query logic.
      // The queries in the code MUST include `where('userId', '==', request.auth.uid)`
      return request.auth != null;
    }

    // Function to check project-level write access
    function canWriteProject() {
      return request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    function canUpdateProject() {
       return request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Users can read their own profile and admins can read any profile
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if request.auth != null;
      allow update: if isOwner(userId);
    }
    
    // Generic rules for user-owned collections
    match /{collection}/{docId} {
      allow list: if canListProjects();
      allow get: if canReadProject();
      allow create: if canWriteProject();
      allow update, delete: if canUpdateProject();
    }
    
    // Public read for specific collections used for sharing
    match /public_productions/{productionId} {
        allow get: if true;
        allow write: if false; // No one can write
    }
    match /public_shooting_days/{dayId} {
        allow get: if true;
        allow write: if false; // No one can write
    }

    // Rules for public content and settings, writable only by admins
    function publicReadAdminWrite() {
      return {
        allow read: if true,
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      };
    }
    
    match /posts/{postId} {
        include publicReadAdminWrite();
    }
    match /pages/{pageId} {
        include publicReadAdminWrite();
    }
    match /teamMembers/{memberId} {
        include publicReadAdminWrite();
    }
    match /settings/{settingId} {
        include publicReadAdminWrite();
    }
  }
}
