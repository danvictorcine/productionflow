rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      // Check if the user is authenticated and if their UID matches the provided userId.
      return request.auth != null && request.auth.uid == userId;
    }

    // --- User Profile ---
    match /users/{userId} {
      // Users can read and update their own profile.
      allow read, update: if isOwner(userId);
    }
    
    // --- Generic rule for user-owned content ---
    // This rule applies to all collections where documents have a 'userId' field.
    match /{collection}/{docId} 
      where collection in ['projects', 'transactions', 'productions', 'creative_projects', 'board_items', 'storyboards', 'storyboard_panels', 'shooting_days'] {
      
      // Allow read, update, and delete if the user owns the existing document.
      allow read, update, delete: if isOwner(resource.data.userId);
      
      // Allow create if the user is creating a document for themselves.
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // --- Public Content & Settings ---
    
    // Posts are public to read, but only authenticated users can write.
    match /posts/{postId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Static pages are public to read, but only authenticated users can write.
    match /pages/{pageId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Team members are public to read, but only authenticated users can write.
    match /teamMembers/{memberId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Theme settings are public to read, but only authenticated users can write.
    match /settings/theme {
      allow get: if true;
      allow write: if request.auth != null;
    }
  }
}
