rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Users can read/update their own profile, but cannot make themselves an admin.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && !("isAdmin" in request.resource.data);
      allow delete: never;
    }

    // Projects and related data are private to the user who created them.
    match /projects/{projectId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /transactions/{transactionId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Productions and related data are private to the user who created them.
    match /productions/{productionId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /shooting_days/{dayId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Blog posts are public to read, but only admins can create, update, or delete them.
    match /posts/{postId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}
