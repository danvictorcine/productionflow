rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Helper function to check if user is admin
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // Rules for user profiles
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if request.auth != null;
      allow update: if isOwner(userId);
    }
    
    // Rules for project-like collections
    function projectAccessRules() {
      return {
        allow get: if isOwner(resource.data.userId),
        allow list: if request.auth.uid == request.query.resource.data.userId,
        allow create: if isOwner(request.resource.data.userId),
        allow update, delete: if isOwner(resource.data.userId)
      };
    }

    match /projects/{docId} {
      include projectAccessRules();
    }
    match /transactions/{docId} {
      include projectAccessRules();
    }
    match /productions/{docId} {
      include projectAccessRules();
    }
    match /shooting_days/{docId} {
      include projectAccessRules();
    }
    match /creative_projects/{docId} {
      include projectAccessRules();
    }
    match /board_items/{docId} {
      include projectAccessRules();
    }
    match /storyboards/{docId} {
      include projectAccessRules();
    }
    match /storyboard_scenes/{docId} {
      include projectAccessRules();
    }
    match /storyboard_panels/{docId} {
      include projectAccessRules();
    }
    match /projectGroups/{docId} {
      include projectAccessRules();
    }

    // Public read for specific collections
    match /public_productions/{productionId} {
      allow get: if true;
    }
    match /public_shooting_days/{dayId} {
      allow get: if true;
    }

    // Rules for CMS-like content (Pages, Posts, Team Members)
    function publicReadAdminWrite() {
      return {
        allow read: if true,
        allow write: if isAdmin()
      };
    }
    
    match /posts/{postId} {
      include publicReadAdminWrite();
    }
    match /pages/{pageId} {
      include publicReadAdminWrite();
    }
    match /teamMembers/{memberId} {
      include publicReadAdminWrite();
    }
    match /settings/{settingId} {
      include publicReadAdminWrite();
    }
  }
}
