
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin role from a custom claim
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // User Profiles: Users can manage their own profile. Admins can manage any.
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Projects, Transactions, Productions, Shooting Days, Creative Projects, and Board Items
    // Users can only access their own data.
    match /projects/{projectId} {
      allow read, write: if isOwner(resource.data.userId);
    }
    
    match /transactions/{transactionId} {
       allow read, write: if isOwner(resource.data.userId);
    }

    match /productions/{productionId} {
       allow read, write: if isOwner(resource.data.userId);
    }

    match /shooting_days/{dayId} {
       allow read, write: if isOwner(resource.data.userId);
    }

    match /creative_projects/{creativeProjectId} {
       allow read, write: if isOwner(resource.data.userId);
    }

    match /board_items/{boardItemId} {
       allow read, write: if isOwner(resource.data.userId);
    }

    // Posts: Public can read, only admins can write
    match /posts/{postId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Pages (about, contact, etc.): Public can read, only admins can write
    match /pages/{pageId} {
       allow read: if true;
       allow write: if isAdmin();
    }
  }
}
