rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // === User Profiles ===
    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }

    // === Unified Projects (New Structure) ===
    match /unified_projects/{projectId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId);
    }
    
    // === Talent Pool ===
    match /talents/{talentId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId);
    }

    // === Legacy Financial Projects ===
    match /projects/{projectId} {
      allow read, delete: if isOwner(resource.data.userId);
      // Deny new creations in the old collection
      allow create: if false;
      // Allow update ONLY to link to a unified project during migration
      allow update: if isOwner(resource.data.userId) && request.resource.data.keys().hasOnly(['unifiedProjectId']);
    }

    // === Legacy Financial Transactions ===
    match /transactions/{transactionId} {
      allow read, write: if isOwner(request.auth.uid);
    }

    // === Legacy Productions (Call Sheets) ===
    match /productions/{productionId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if false;
      allow update: if isOwner(resource.data.userId) && request.resource.data.keys().hasOnly(['unifiedProjectId']);
    }
    
    // === Legacy Creative Projects (Moodboards) ===
    match /creative_projects/{projectId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if false;
      allow update: if isOwner(resource.data.userId) && request.resource.data.keys().hasOnly(['unifiedProjectId']);
    }
    
    // === Legacy Storyboards ===
    match /storyboards/{storyboardId} {
      allow read, delete: if isOwner(resource.data.userId);
      allow create: if false;
      allow update: if isOwner(resource.data.userId) && request.resource.data.keys().hasOnly(['unifiedProjectId']);
    }

    // === Sub-collections ===
    match /{path=**}/shooting_days/{dayId} {
      allow read, write: if isOwner(request.auth.uid);
    }
    
    match /{path=**}/board_items/{itemId} {
      allow read, write: if isOwner(request.auth.uid);
    }
    
    match /{path=**}/storyboard_scenes/{sceneId} {
      allow read, write: if isOwner(request.auth.uid);
    }
    
    match /{path=**}/storyboard_panels/{panelId} {
      allow read, write: if isOwner(request.auth.uid);
    }
    
    // === Public, Read-Only Data ===
    match /public_productions/{productionId} {
        allow get;
        allow list, write: if false;
    }
    
    match /public_shooting_days/{dayId} {
        allow get;
        allow list, write: if false;
    }
    
    // === Blog & Static Page Content ===
    match /posts/{postId} {
      allow read;
      allow create, update, delete: if isOwner(request.auth.uid) && request.auth.token.isAdmin == true;
    }

    match /pages/{pageId} {
      allow read;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // === Team Members for "About" Page ===
    match /teamMembers/{memberId} {
      allow read;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
    
    // === General Settings (Theme, Beta Limits) ===
    match /settings/{settingId} {
      allow read;
      allow write: if request.auth != null && request.auth.token.isAdmin == true;
    }
  }
}