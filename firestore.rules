
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check ownership
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Default security rules for user-specific collections
    // The user can read and write their own documents.
    // Listing documents is allowed only when querying by the user's own ID.
    match /{collection}/{docId} 
      where collection in ['projects', 'transactions', 'productions', 'shooting_days', 'creative_projects', 'board_items', 'storyboards', 'storyboard_scenes', 'storyboard_panels', 'projectGroups'] {
        allow read: if isOwner(resource.data.userId);
        allow write: if isOwner(request.resource.data.userId);
    }

    // Users can create and manage their own profile
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId);
    }

    // Public read for specific collections, write access only for admins
    function publicReadAdminWrite() {
      return {
        allow read: true,
        allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true
      };
    }
    
    match /posts/{postId} {
        rules { include publicReadAdminWrite(); }
    }
    match /pages/{pageId} {
        rules { include publicReadAdminWrite(); }
    }
    match /teamMembers/{memberId} {
        rules { include publicReadAdminWrite(); }
    }
    match /settings/{settingId} {
        rules { include publicReadAdminWrite(); }
    }
    
    // Public read for sharing functionality
    match /public_productions/{productionId} {
      allow get: if true;
    }
    match /public_shooting_days/{dayId} {
      allow get: if true;
    }
  }
}
